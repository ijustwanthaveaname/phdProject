coef.glmnet               package:glmnet               R Documentation

_E_x_t_r_a_c_t _c_o_e_f_f_i_c_i_e_n_t_s _f_r_o_m _a _g_l_m_n_e_t _o_b_j_e_c_t

_D_e_s_c_r_i_p_t_i_o_n:

     Similar to other predict methods, this functions predicts fitted
     values, logits, coefficients and more from a fitted ‘"glmnet"’
     object.

_U_s_a_g_e:

     ## S3 method for class 'glmnet'
     coef(object, s = NULL, exact = FALSE, ...)
     
     ## S3 method for class 'glmnet'
     predict(
       object,
       newx,
       s = NULL,
       type = c("link", "response", "coefficients", "nonzero", "class"),
       exact = FALSE,
       newoffset,
       ...
     )
     
     ## S3 method for class 'relaxed'
     predict(
       object,
       newx,
       s = NULL,
       gamma = 1,
       type = c("link", "response", "coefficients", "nonzero", "class"),
       exact = FALSE,
       newoffset,
       ...
     )
     
_A_r_g_u_m_e_n_t_s:

  object: Fitted ‘"glmnet"’ model object or a ‘"relaxed"’ model (which
          inherits from class "glmnet").

       s: Value(s) of the penalty parameter ‘lambda’ at which
          predictions are required. Default is the entire sequence used
          to create the model.

   exact: This argument is relevant only when predictions are made at
          values of ‘s’ (lambda) _different_ from those used in the
          fitting of the original model. Not available for ‘"relaxed"’
          objects. If ‘exact=FALSE’ (default), then the predict
          function uses linear interpolation to make predictions for
          values of ‘s’ (lambda) that do not coincide with those used
          in the fitting algorithm. While this is often a good
          approximation, it can sometimes be a bit coarse.  With
          ‘exact=TRUE’, these different values of ‘s’ are merged (and
          sorted) with ‘object$lambda’, and the model is refit before
          predictions are made. In this case, it is required to supply
          the original data ‘x=’ and ‘y=’ as additional named arguments
          to ‘predict()’ or ‘coef()’.  The workhorse ‘predict.glmnet()’
          needs to ‘update’ the model, and so needs the data used to
          create it. The same is true of ‘weights’, ‘offset’,
          ‘penalty.factor’, ‘lower.limits’, ‘upper.limits’ if these
          were used in the original call. Failure to do so will result
          in an error.

     ...: This is the mechanism for passing arguments like ‘x=’ when
          ‘exact=TRUE’; see‘exact’ argument.

    newx: Matrix of new values for ‘x’ at which predictions are to be
          made. Must be a matrix; can be sparse as in ‘Matrix’ package.
          This argument is not used for
          ‘type=c("coefficients","nonzero")’

    type: Type of prediction required. Type ‘"link"’ gives the linear
          predictors for ‘"binomial"’, ‘"multinomial"’, ‘"poisson"’ or
          ‘"cox"’ models; for ‘"gaussian"’ models it gives the fitted
          values. Type ‘"response"’ gives the fitted probabilities for
          ‘"binomial"’ or ‘"multinomial"’, fitted mean for ‘"poisson"’
          and the fitted relative-risk for ‘"cox"’; for ‘"gaussian"’
          type ‘"response"’ is equivalent to type ‘"link"’. Type
          ‘"coefficients"’ computes the coefficients at the requested
          values for ‘s’.  Note that for ‘"binomial"’ models, results
          are returned only for the class corresponding to the second
          level of the factor response. Type ‘"class"’ applies only to
          ‘"binomial"’ or ‘"multinomial"’ models, and produces the
          class label corresponding to the maximum probability. Type
          ‘"nonzero"’ returns a list of the indices of the nonzero
          coefficients for each value of ‘s’.

newoffset: If an offset is used in the fit, then one must be supplied
          for making predictions (except for ‘type="coefficients"’ or
          ‘type="nonzero"’)

   gamma: Single value of ‘gamma’ at which predictions are required,
          for "relaxed" objects.

_D_e_t_a_i_l_s:

     The shape of the objects returned are different for
     ‘"multinomial"’ objects. This function actually calls
     ‘NextMethod()’, and the appropriate predict method is invoked for
     each of the three model types. ‘coef(...)’ is equivalent to
     ‘predict(type="coefficients",...)’

_V_a_l_u_e:

     The object returned depends on type.

_A_u_t_h_o_r(_s):

     Jerome Friedman, Trevor Hastie and Rob Tibshirani
     Maintainer: Trevor Hastie hastie@stanford.edu

_R_e_f_e_r_e_n_c_e_s:

     Friedman, J., Hastie, T. and Tibshirani, R. (2008) _Regularization
     Paths for Generalized Linear Models via Coordinate Descent (2010),
     Journal of Statistical Software, Vol. 33(1), 1-22_, doi:
     10.18637/jss.v033.i01 (URL:
     https://doi.org/10.18637/jss.v033.i01).
     Simon, N., Friedman, J., Hastie, T. and Tibshirani, R. (2011)
     _Regularization Paths for Cox's Proportional Hazards Model via
     Coordinate Descent, Journal of Statistical Software, Vol. 39(5),
     1-13_, doi: 10.18637/jss.v039.i05 (URL:
     https://doi.org/10.18637/jss.v039.i05).
     Glmnet webpage with four vignettes, <https://glmnet.stanford.edu>.

_S_e_e _A_l_s_o:

     ‘glmnet’, and ‘print’, and ‘coef’ methods, and ‘cv.glmnet’.

_E_x_a_m_p_l_e_s:

     x=matrix(rnorm(100*20),100,20)
     y=rnorm(100)
     g2=sample(1:2,100,replace=TRUE)
     g4=sample(1:4,100,replace=TRUE)
     fit1=glmnet(x,y)
     predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
     predict(fit1,type="coef")
     fit2=glmnet(x,g2,family="binomial")
     predict(fit2,type="response",newx=x[2:5,])
     predict(fit2,type="nonzero")
     fit3=glmnet(x,g4,family="multinomial")
     predict(fit3,newx=x[1:3,],type="response",s=0.01)
     

